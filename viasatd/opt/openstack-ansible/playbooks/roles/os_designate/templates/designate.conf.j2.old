[DEFAULT]
auth_strategy = keystone
verbose = {{ verbose }}
debug = {{ debug }}
notification_driver = messaging
notification_topics = notifications

[oslo_messaging_rabbit]
rpc_backend = rabbit
rabbit_hosts = {{ rabbitmq_servers }}
rabbit_port = {{ rabbitmq_port }}
rabbit_userid = {{ designate_rabbitmq_userid }}
rabbit_password = {{ designate_rabbitmq_password }}
rabbit_use_ssl = {{ rabbitmq_use_ssl }}
rabbit_notification_exchange = designate 
rabbit_notification_topic = notifications

#-----------------------
# Keystone Middleware
#-----------------------
[keystone_authtoken]
auth_host = 10.16.34.6
auth_port = 35357
auth_protocol = http
admin_tenant_name = {{ designate_service_project_name }}
admin_user = {{ designate_service_user_name }}
admin_password = {{ designate_service_password }}
memcached_servers = {{ memcached_servers }}


########################
#-----------------------
# Central Service
#-----------------------
[service:central]
# Number of central worker processes to spawn
#workers = 10

# Number of central greenthreads to spawn
threads = 1000

# Maximum domain name length
max_domain_name_len = 255

# Maximum recordset name length
max_recordset_name_len = 255

# Minimum TTL
#min_ttl = None

# The name of the default pool
default_pool_id = '794ccc2c-d751-44fe-b57f-8894c9f5c842'

## Managed resources settings

# Email to use for managed resources like domains created by the FloatingIP API
#managed_resource_email = hostmaster@example.com.

# Tenant ID to own all managed resources - like auto-created records etc.
managed_resource_tenant_id = None 

#-----------------------
# API Service
#-----------------------
[service:api]

threads=1000

# The base uri used in responses
api_base_uri = 'http://10.16.34.6:9001/v1'

# Address to bind the API server
api_host = 0.0.0.0

# Port to bind the API server
api_port = 9001

# Authentication strategy to use - can be either "noauth" or "keystone"
auth_strategy = keystone 

# Enable API Version 1
enable_api_v1 = True

# Enable API Version 2
enable_api_v2 = True

# Enabled API Version 1 extensions
enabled_extensions_v1 = diagnostics, quotas, reports, sync, touch

# Enabled API Version 2 extensions
enabled_extensions_v2 = quotas, reports

# Enable Admin API (experimental)
enable_api_admin = False

# Enabled Admin API extensions
# Can be one or more of : reports, quotas, counts, tenants, zones
# zone export is in zones extension
enabled_extensions_admin = reports, quotas, counts, tenants, zones

# Default per-page limit for the Admin API, a value of None means show all results
# by default
default_limit_admin = 20

# Max page size in the Admin API
max_limit_admin = 1000


#-----------------------
# mDNS Service
#-----------------------
[service:mdns]
# Number of mdns worker processes to spawn
#workers = 10

# Number of mdns greenthreads to spawn
threads = 1000

# mDNS Bind Host
host = 0.0.0.0 

# mDNS Port Number
port = 5354

# mDNS TCP Backlog
tcp_backlog = 100

# mDNS TCP Receive Timeout
tcp_recv_timeout = 0.5

# Enforce all incoming queries (including AXFR) are TSIG signed
query_enforce_tsig = False

# Send all traffic over TCP
all_tcp = False

# Maximum message size to emit
max_message_size = 65535

#-----------------------
# Pool Manager Service
#-----------------------
[service:pool_manager]
backends = bind9
threads = 1000
pool_id = 794ccc2c-d751-44fe-b57f-8894c9f5c842
threshold_percentage = 100
poll_timeout = 30
poll_retry_interval = 15
poll_max_retries = 3
poll_delay = 5
periodic_recovery_interval = 120
enable_sync_timer = True
periodic_sync_interval = 300
cache_driver = memcache 

########################
## Storage Configuration
########################
#-----------------------
# SQLAlchemy Storage
#-----------------------

[storage:sqlalchemy]
# Database connection string - to configure options for a given implementation
# like sqlalchemy or other see below
connection = mysql://{{ designate_galera_user }}:{{ designate_container_mysql_password }}@{{ designate_galera_address }}/designate?charset=utf8
connection_debug = 100
connection_trace = True 
sqlite_synchronous = True
idle_timeout = 3600
max_retries = 10
retry_interval = 10


[pool_manager_cache:sqlalchemy]
connection = mysql://{{ designate_galera_user }}:{{ designate_container_mysql_password }}@{{ designate_galera_address }}/designate_pool_manager?charset=utf8
connection_debug = 100
connection_trace = False 
sqlite_synchronous = True
idle_timeout = 3600
max_retries = 10
retry_interval = 10

#-----------------------
# Memcache Pool Manager Cache
#-----------------------
[pool_manager_cache:memcache]
memcached_servers = None
expiration = 3600

#############################
## Pool Backend Configuration
#############################
#-----------------------
# Global Bind9 Pool Backend
#-----------------------
#[backend:bind9]
#server_ids = 6a5032b6-2d96-43ee-b25b-7d784e2bf3b2
#masters = 10.16.34.6:5354
#rndc_host = 10.16.34.6
#rndc_port = 953
#rndc_config_file = /etc/rndc.conf
#rndc_key_file = /etc/rndc.key

#-----------------------
# Server Specific Bind9 Pool Backend
#-----------------------
#[backend:bind9:6a5032b6-2d96-43ee-b25b-7d784e2bf3b2]
#host = 10.16.34.6 
#port = 53

#####################
## Pool Configuration
#####################

# This section does not have the defaults filled in but demonstrates an
# example pool / server set up. Different backends will have different options.

[pool:794ccc2c-d751-44fe-b57f-8894c9f5c842]
nameservers = 0f66b842-96c2-4189-93fc-1dc95a08b012
targets = f26e0b32-736f-4f0a-831b-039a415c481e
#also_notifies = 192.0.2.1:53, 192.0.2.2:53

[pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b012]
port = 53
host = 10.16.34.6 

[pool_target:f26e0b32-736f-4f0a-831b-039a415c481e]
options = rndc_host: 10.16.34.6, rndc_port: 953, rndc_config_file: /etc/bind/rndc.conf, rndc_key_file: /etc/bind/rndc.key, port: 53, host: 10.16.34.6, clean_zonefile: false
masters = 10.16.34.6:5354
type = bind9


[service:sink]

enabled_notification_handlers = nova_fixed

[handler:nova_fixed]
# Domain ID of domain to create records in. Should be pre-created
notification_topics = notifications
control_exchange = 'nova'
zone_id = e7192aa3-294b-491c-a2e7-3624e87f0af1
format = '%(instance_id)s.%(zone)s'

